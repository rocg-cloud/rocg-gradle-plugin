/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.10/userguide/custom_plugins.html in the Gradle documentation.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

	//将插件发布到 Gradle 插件门户
	alias(libs.plugins.gradle.plugin.publish)
}

repositories {
	//优先本地,国内
	mavenLocal()
	//maven("https://repo.spring.io/release")
	//maven("https://repo.huaweicloud.com/repository/maven/")
	//maven("https://mirrors.cloud.tencent.com/nexus/repository/maven-public/")
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
	//spring gradle
	implementation("org.springframework.boot:spring-boot-gradle-plugin:${libs.versions.spring.boot.get()}")
	implementation("io.spring.javaformat:spring-javaformat-gradle-plugin:${libs.versions.spring.javaformat.get()}")
	//google protobuf
	implementation("com.google.protobuf:protobuf-gradle-plugin:${libs.versions.google.protobuf.plugins.get()}")
	implementation("com.google.gradle:osdetector-gradle-plugin:${libs.versions.google.osdetector.plugins.get()}")
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

gradlePlugin {
	website.set("https://github.com/rocg-cloud/rocg-gradle-plugin")
	vcsUrl.set("https://github.com/rocg-cloud/rocg-gradle-plugin.git")

    // Define the plugin
//    val greeting by plugins.creating {
//        id = "org.example.greeting"
//        implementationClass = "org.example.RocgGradlePluginPlugin"
//    }

	plugins {
		create("bomPlugin") {
			id = "io.github.rocwg.gradle.plugin.bom"
			implementationClass = "io.github.rocwg.gradle.plugin.BomPlugin"
			displayName = "BomPlugin"
			description = "bom or dependencies use"
			tags = listOf("bom", "dependencies")
		}
		create("modulePlugin") {
			id = "io.github.rocwg.gradle.plugin.module"
			implementationClass = "io.github.rocwg.gradle.plugin.ModulePlugin"
			displayName = "ModulePlugin"
			description = "Used to mark modules, all available nodes"
			tags = listOf("modules", "nodes")
		}
		create("commonPlugin") {
			id = "io.github.rocwg.gradle.plugin.common"
			implementationClass = "io.github.rocwg.gradle.plugin.CommonPlugin"
			displayName = "CommonPlugin"
			description = "The packaging method is ordinary jar instead of spring bootJar"
			tags = listOf("jar", "package")
		}
		create("rootProjectPlugin") {
			id = "io.github.rocwg.gradle.plugin.root"
			implementationClass = "io.github.rocwg.gradle.plugin.RootPlugin"
			displayName = "RootPlugin"
			description = "Used to mark certain root nodes to directly operate sub-packages"
			tags = listOf("rootNodes")
		}
		create("servicePlugin") {
			id = "io.github.rocwg.gradle.plugin.service"
			implementationClass = "io.github.rocwg.gradle.plugin.ServicePlugin"
			displayName = "ServicePlugin"
			description = "The packaging method is spring bootJar"
			tags = listOf("spring", "bootJar")
		}
		create("deployedPlugin") {
			id = "io.github.rocwg.gradle.plugin.mvn.deployed"
			implementationClass = "io.github.rocwg.gradle.plugin.maven.DeployedPlugin"
			displayName = "DeployedPlugin"
			description = "Used to deploy releases to MVN"
			tags = listOf("deploy", "maven")
		}
//		create("protobufPlugin"){
//			id = "google.protobuf"
//			implementationClass = "com.google.protobuf.gradle.ProtobufPlugin"
//		}
	}
}

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])
configurations["functionalTestRuntimeOnly"].extendsFrom(configurations["testRuntimeOnly"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(functionalTestSourceSet)

tasks.named<Task>("check") {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

tasks.named<Test>("test") {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

// 有什么用？
tasks.withType<Jar> {
	manifest.attributes.putIfAbsent(
		"Created-By",
		System.getProperty("java.version") + " (" + System.getProperty("java.specification.vendor") + ")"
	)
	manifest.attributes.putIfAbsent("Gradle-Version", GradleVersion.current())
}
